#ifndef AMAC_H
#define AMAC_H

#include <memory>
#include <iostream>

#include "I2CCom.h"

enum class AMACreg;

class AMAC {
public:
  AMAC(std::shared_ptr<I2CCom> i2c);
  ~AMAC();

  void init();

  int read(AMACreg reg, unsigned &val);
  int write(AMACreg reg, unsigned val);

private:
  std::shared_ptr<I2CCom> m_i2c;

  int readBits(unsigned startreg, unsigned num_bits, unsigned offset, unsigned &value);
  int writeBits(unsigned startreg, unsigned num_bits, unsigned offset, unsigned value);
};

//AMAC registers
enum class AMACreg {
	STATUS_ID,
	STATUS_HV_ILOCK,
	STATUS_LV_ILOCK,
	STATUS_HV_WARN,
	STATUS_LV_WARN,
	HV_ILOCK_LEFT_HIGH,
	HV_ILOCK_LEFT_LOW,
	HV_ILOCK_RIGHT_HIGH,
	HV_ILOCK_RIGHT_LOW,
	LV_ILOCK_LEFT_HIGH,
	LV_ILOCK_LEFT_LOW,
	LV_ILOCK_RIGHT_HIGH,
	LV_ILOCK_RIGHT_LOW,
	HV_WARN_LEFT_HIGH,
	HV_WARN_LEFT_LOW,
	HV_WARN_RIGHT_HIGH,
	HV_WARN_RIGHT_LOW,
	LV_WARN_LEFT_HIGH,
	LV_WARN_LEFT_LOW,
	LV_WARN_RIGHT_HIGH,
	LV_WARN_RIGHT_LOW,
	VALUE_LEFT_CH0, 
	VALUE_LEFT_CH1, 
	VALUE_LEFT_CH2, 
	VALUE_LEFT_CH3, 
	VALUE_LEFT_CH4, 
	VALUE_LEFT_CH5, 
	VALUE_LEFT_CH6, 
	VALUE_RIGHT_CH0, 
	VALUE_RIGHT_CH1,
	VALUE_RIGHT_CH2,
	VALUE_RIGHT_CH3,
	VALUE_RIGHT_CH4,
	VALUE_RIGHT_CH5,
	VALUE_RIGHT_CH6,
	OPAMP_GAIN_RIGHT,
	OPAMP_GAIN_LEFT,
	RIGHT_RAMP_GAIN,
	LEFT_RAMP_GAIN,
	BANDGAP_CONTROL,
	RT_CH0_SEL,
	LT_CH0_SEL,
	RT_CH3_GAIN_SEL,
	LT_CH3_GAIN_SEL,
	CLK_OUT_ENABLE,
	CLK_SELECT,
	HV_FREQ,
	HV_ENABLE,
	LV_ENABLE,
	HV_ILOCK,
	HV_ILOCK_LAM,
	LV_ILOCK,
	LV_ILOCK_LAM,
	RESET_HV_ILOCK,
	RESET_HV_WARN,
	RESET_LV_ILOCK,
	RESET_LV_WARN,
	ILOCK_FLAG_HV_LEFT_HI,
	ILOCK_FLAG_HV_LEFT_LO,
	ILOCK_FLAG_HV_RIGHT_HI,
	ILOCK_FLAG_HV_RIGHT_LO,
	ILOCK_FLAG_LV_LEFT_HI,
	ILOCK_FLAG_LV_LEFT_LO,
	ILOCK_FLAG_LV_RIGHT_HI,
	ILOCK_FLAG_LV_RIGHT_LO,
	WARN_FLAG_HV_LEFT_HI,
	WARN_FLAG_HV_LEFT_LO,
	WARN_FLAG_HV_RIGHT_HI,
	WARN_FLAG_HV_RIGHT_LO,
	WARN_FLAG_LV_LEFT_HI,
	WARN_FLAG_LV_LEFT_LO,
	WARN_FLAG_LV_RIGHT_HI,
	WARN_FLAG_LV_RIGHT_LO,
	ILOCK_EN_HV_LEFT_HI,
	ILOCK_EN_HV_LEFT_LO,
	ILOCK_EN_HV_RIGHT_HI,
	ILOCK_EN_HV_RIGHT_LO,
	ILOCK_EN_LV_LEFT_HI,
	ILOCK_EN_LV_LEFT_LO,
	ILOCK_EN_LV_RIGHT_HI,
	ILOCK_EN_LV_RIGHT_LO,
	WARN_EN_HV_LEFT_HI,
	WARN_EN_HV_LEFT_LO,
	WARN_EN_HV_RIGHT_HI,
	WARN_EN_HV_RIGHT_LO,
	WARN_EN_LV_LEFT_HI,
	WARN_EN_LV_LEFT_LO,
	WARN_EN_LV_RIGHT_HI,
	WARN_EN_LV_RIGHT_LO,
	ILOCK_HV_THRESH_HI_L_CH0,
	ILOCK_HV_THRESH_HI_L_CH1,
	ILOCK_HV_THRESH_HI_L_CH2,
	ILOCK_HV_THRESH_HI_L_CH3,
	ILOCK_HV_THRESH_HI_L_CH4,
	ILOCK_HV_THRESH_HI_L_CH5,
	ILOCK_HV_THRESH_HI_L_CH6,
	ILOCK_HV_THRESH_LO_L_CH0,
	ILOCK_HV_THRESH_LO_L_CH1,
	ILOCK_HV_THRESH_LO_L_CH2,
	ILOCK_HV_THRESH_LO_L_CH3,
	ILOCK_HV_THRESH_LO_L_CH4,
	ILOCK_HV_THRESH_LO_L_CH5,
	ILOCK_HV_THRESH_LO_L_CH6,
	ILOCK_HV_THRESH_HI_R_CH0,
	ILOCK_HV_THRESH_HI_R_CH1,
	ILOCK_HV_THRESH_HI_R_CH2,
	ILOCK_HV_THRESH_HI_R_CH3,
	ILOCK_HV_THRESH_HI_R_CH4,
	ILOCK_HV_THRESH_HI_R_CH5,
	ILOCK_HV_THRESH_HI_R_CH6,
	ILOCK_HV_THRESH_LO_R_CH0,
	ILOCK_HV_THRESH_LO_R_CH1,
	ILOCK_HV_THRESH_LO_R_CH2,
	ILOCK_HV_THRESH_LO_R_CH3,
	ILOCK_HV_THRESH_LO_R_CH4,
	ILOCK_HV_THRESH_LO_R_CH5,
	ILOCK_HV_THRESH_LO_R_CH6,
	ILOCK_LV_THRESH_HI_L_CH0,
	ILOCK_LV_THRESH_HI_L_CH1,
	ILOCK_LV_THRESH_HI_L_CH2,
	ILOCK_LV_THRESH_HI_L_CH3,
	ILOCK_LV_THRESH_HI_L_CH4,
	ILOCK_LV_THRESH_HI_L_CH5,
	ILOCK_LV_THRESH_HI_L_CH6,
	ILOCK_LV_THRESH_LO_L_CH0,
	ILOCK_LV_THRESH_LO_L_CH1,
	ILOCK_LV_THRESH_LO_L_CH2,
	ILOCK_LV_THRESH_LO_L_CH3,
	ILOCK_LV_THRESH_LO_L_CH4,
	ILOCK_LV_THRESH_LO_L_CH5,
	ILOCK_LV_THRESH_LO_L_CH6,
	ILOCK_LV_THRESH_HI_R_CH0,
	ILOCK_LV_THRESH_HI_R_CH1,
	ILOCK_LV_THRESH_HI_R_CH2,
	ILOCK_LV_THRESH_HI_R_CH3,
	ILOCK_LV_THRESH_HI_R_CH4,
	ILOCK_LV_THRESH_HI_R_CH5,
	ILOCK_LV_THRESH_HI_R_CH6,
	ILOCK_LV_THRESH_LO_R_CH0,
	ILOCK_LV_THRESH_LO_R_CH1,
	ILOCK_LV_THRESH_LO_R_CH2,
	ILOCK_LV_THRESH_LO_R_CH3,
	ILOCK_LV_THRESH_LO_R_CH4,
	ILOCK_LV_THRESH_LO_R_CH5,
	ILOCK_LV_THRESH_LO_R_CH6,
	WARN_HV_THRESH_HI_L_CH0,
	WARN_HV_THRESH_HI_L_CH1,
	WARN_HV_THRESH_HI_L_CH2,
	WARN_HV_THRESH_HI_L_CH3,
	WARN_HV_THRESH_HI_L_CH4,
	WARN_HV_THRESH_HI_L_CH5,
	WARN_HV_THRESH_HI_L_CH6,
	WARN_HV_THRESH_LO_L_CH0,
	WARN_HV_THRESH_LO_L_CH1,
	WARN_HV_THRESH_LO_L_CH2,
	WARN_HV_THRESH_LO_L_CH3,
	WARN_HV_THRESH_LO_L_CH4,
	WARN_HV_THRESH_LO_L_CH5,
	WARN_HV_THRESH_LO_L_CH6,
	WARN_HV_THRESH_HI_R_CH0,
	WARN_HV_THRESH_HI_R_CH1,
	WARN_HV_THRESH_HI_R_CH2,
	WARN_HV_THRESH_HI_R_CH3,
	WARN_HV_THRESH_HI_R_CH4,
	WARN_HV_THRESH_HI_R_CH5,
	WARN_HV_THRESH_HI_R_CH6,
	WARN_HV_THRESH_LO_R_CH0,
	WARN_HV_THRESH_LO_R_CH1,
	WARN_HV_THRESH_LO_R_CH2,
	WARN_HV_THRESH_LO_R_CH3,
	WARN_HV_THRESH_LO_R_CH4,
	WARN_HV_THRESH_LO_R_CH5,
	WARN_HV_THRESH_LO_R_CH6,
	WARN_LV_THRESH_HI_L_CH0,
	WARN_LV_THRESH_HI_L_CH1,
	WARN_LV_THRESH_HI_L_CH2,
	WARN_LV_THRESH_HI_L_CH3,
	WARN_LV_THRESH_HI_L_CH4,
	WARN_LV_THRESH_HI_L_CH5,
	WARN_LV_THRESH_HI_L_CH6,
	WARN_LV_THRESH_LO_L_CH0,
	WARN_LV_THRESH_LO_L_CH1,
	WARN_LV_THRESH_LO_L_CH2,
	WARN_LV_THRESH_LO_L_CH3,
	WARN_LV_THRESH_LO_L_CH4,
	WARN_LV_THRESH_LO_L_CH5,
	WARN_LV_THRESH_LO_L_CH6,
	WARN_LV_THRESH_HI_R_CH0,
	WARN_LV_THRESH_HI_R_CH1,
	WARN_LV_THRESH_HI_R_CH2,
	WARN_LV_THRESH_HI_R_CH3,
	WARN_LV_THRESH_HI_R_CH4,
	WARN_LV_THRESH_HI_R_CH5,
	WARN_LV_THRESH_HI_R_CH6,
	WARN_LV_THRESH_LO_R_CH0,
	WARN_LV_THRESH_LO_R_CH1,
	WARN_LV_THRESH_LO_R_CH2,
	WARN_LV_THRESH_LO_R_CH3,
	WARN_LV_THRESH_LO_R_CH4,
	WARN_LV_THRESH_LO_R_CH5,
	WARN_LV_THRESH_LO_R_CH6,
};
#endif
